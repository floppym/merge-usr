#!/usr/bin/env python3
# SPDX-License-Identifier: GPL-2.0-or-later

import argparse
import contextlib
import errno
import fnmatch
import logging
import os
import os.path
import shutil
import stat
import sys
import tempfile

DIR_MAP = {
    "bin": "usr/bin",
    "sbin": "usr/bin",
    "usr/sbin": "usr/bin",
    "lib": "usr/lib",
    "lib32": "usr/lib32",
    "lib64": "usr/lib64",
    "libx32": "usr/libx32",
}

IGNORE_PATTERNS = (
    ".keep*",
)

def raise_exists(path):
    raise FileExistsError(errno.EEXIST, os.strerror(errno.EEXIST), path)

def replace_with_symlink(src, dst):
    srcdir = os.path.dirname(src)
    target = os.path.relpath(dst, srcdir)
    tmp = tempfile.mktemp(dir=srcdir)
    os.symlink(target, tmp)
    os.rename(tmp, src)

def check_directory(path):
    if os.path.exists(path) and not os.path.isdir(path):
        raise_exists(path)

def ensure_directory(path):
    try:
        os.mkdir(path)
    except FileExistsError:
        if not os.path.isdir(path):
            raise
    else:
        os.chmod(path, 0o0755)

class SkipSymlink(Exception):
    pass

class MergeUsr:
    def __init__(self, dryrun, root, prefix, dirmap, ignore_patterns, loglevel=logging.WARNING):
        self.dryrun = dryrun
        self.root = root
        self.prefix = prefix
        self.dirmap = dirmap
        self.ignore_patterns = ignore_patterns
        self.errors = []
        self.logger = logging.getLogger(__name__)
        self.logger.setLevel(loglevel)

    def ignore_name(self, name):
        return any((fnmatch.fnmatch(name, pattern) for pattern in self.ignore_patterns))

    def resolve_symlinks(self, path):
        try:
            target = os.readlink(path)
        except OSError:
            pass
        else:
            if os.path.isabs(target):
                path = os.path.join(self.root, os.path.relpath(target, "/"))
        return os.path.realpath(path)

    def check_object(self, src, dst, src_is_symlink):
        try:
            st = os.lstat(dst)
        except FileNotFoundError:
            return
        if stat.S_ISLNK(st.st_mode):
            dst = self.resolve_symlinks(dst)
        if src_is_symlink:
            src = self.resolve_symlinks(src)
        if src == dst or os.path.samefile(src, dst):
            if src_is_symlink:
                raise SkipSymlink()
        else:
            raise_exists(dst)

    def check_symlink(self, src, dst):
        self.log_compare("symlink", src, dst)
        self.check_object(src, dst, True)

    def check_file(self, src, dst):
        self.log_compare("file", src, dst)
        self.check_object(src, dst, False)

    def copy_symlink(self, src, dst):
        srcdir = os.path.dirname(src)
        dstdir = os.path.dirname(dst)
        target = os.readlink(src)
        if not os.path.isabs(target):
            t = os.path.join(srcdir, target)
            t = self.resolve_symlinks(t)
            if t.startswith(srcdir):
                target = os.path.relpath(t, srcdir)
            else:
                target = os.path.relpath(t, dstdir)
        os.symlink(target, dst)

    def link_or_copy_file(self, src, dst):
        tmp = tempfile.mktemp(dir=os.path.dirname(dst))
        try:
            os.link(src, tmp, follow_symlinks=False)
        except FileExistsError:
            raise
        except OSError:
            shutil.copy2(src, tmp)
        os.rename(tmp, dst)
        replace_with_symlink(src, dst)

    def log_compare(self, filetype, src, dst):
        self.logger.info("Comparing %s '%s' to '%s'", filetype, src, dst)

    def log_error(self, filetype, path, error):
        self.errors.append((filetype, path, error))
        self.logger.error("Copying %s '%s': %s", filetype, path, error)

    def copy_tree(self, srcdir, dstdir):
        with os.scandir(srcdir) as entries:
            for entry in entries:
                if self.ignore_name(entry.name):
                    continue
                src = os.path.join(srcdir, entry.name)
                dst = os.path.join(dstdir, entry.name)
                if entry.is_symlink():
                    try:
                        self.check_symlink(src, dst)
                    except SkipSymlink:
                        self.logger.warning("Skipping symlink '%s'", src)
                    except Exception as e:
                        self.log_error("symlink", src, e)
                    else:
                        if not self.dryrun:
                            self.copy_symlink(src, dst)
                elif entry.is_file(follow_symlinks=False):
                    try:
                        self.check_file(src, dst)
                    except Exception as e:
                        self.log_error("file", src, e)
                    else:
                        if not self.dryrun:
                            self.link_or_copy_file(src, dst)
                elif entry.is_dir(follow_symlinks=False):
                    try:
                        check_directory(dst)
                    except Exception as e:
                        self.log_error("directory", src, e)
                    else:
                        if not self.dryrun:
                            ensure_directory(dst)
                        self.copy_tree(src, dst)
                else:
                    self.log_error("special file", src, "Special files are not supported")

    def run(self):
        for d in self.dirmap:
            src = os.path.join(self.root, self.prefix, d)
            dst = os.path.join(self.root, self.prefix, self.dirmap[d])

            if os.path.islink(src):
                self.logger.warning("Already a symlink: '%s'", src)
                continue

            if not os.path.exists(src):
                continue

            if not os.path.isdir(src):
                self.logger.warning("Not a directory: '%s'", src)
                continue

            self.copy_tree(src, dst)

            if not self.dryrun and not self.errors:
                target = os.path.relpath(dst, src)
                tmp = tempfile.mktemp(dir=os.path.dirname(src))
                os.rename(src, tmp)
                os.symlink(target, src)
                shutil.rmtree(tmp)

def main():
    logging.basicConfig()

    parser = argparse.ArgumentParser()
    parser.add_argument("--dryrun", action=argparse.BooleanOptionalAction)
    parser.add_argument("--root")
    parser.add_argument("--prefix")
    parser.add_argument("--verbose", action="store_true")

    args = parser.parse_args()

    loglevel = logging.WARNING
    if args.verbose:
        loglevel = logging.INFO

    root = args.root
    if root is None:
        root = "/"
    else:
        root = args.root.rstrip("/") + "/"

    prefix = args.prefix
    if prefix is None:
        prefix = ""
    else:
        prefix = prefix.lstrip("/")

    os.umask(0o077)
    MergeUsr(args.dryrun, root, prefix, DIR_MAP, IGNORE_PATTERNS, loglevel=loglevel).run()

if __name__ == "__main__":
    main()
